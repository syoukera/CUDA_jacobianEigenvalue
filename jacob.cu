#include "jacob.cuh"

__device__ void eval_jacob (const double t, const double * __restrict__ p, const double * __restrict__ y, double * __restrict__ jac, const mechanism_memory * __restrict__ d_mem) {

  extern volatile __shared__ double shared_temp[];
  double T = y[INDEX(0)];
  double pres = p[T_ID];
  // if (T_ID < 16) printf("T_ID=%d, pres=%g\n", T_ID, pres);

  // average molecular weight
  double mw_avg;
  // mass-averaged density
  double rho;
  // species molar concentrations
  double * __restrict__ conc = d_mem->conc;
  double y_N;
  eval_conc(y[INDEX(0)], pres, &y[GRID_DIM], &y_N, &mw_avg, &rho, conc);
  // eval_conc(T, pres, y, &y_N, &mw_avg, &rho, conc);

  // evaluate reaction rates
  double * __restrict__ fwd_rates = d_mem->fwd_rates;
  double * __restrict__ rev_rates = d_mem->rev_rates;
  eval_rxn_rates (T, pres, conc, fwd_rates, rev_rates);

  double * __restrict__ pres_mod = d_mem->pres_mod;
  //get pressure modifications to reaction rates
  get_rxn_pres_mod (T, pres, conc, pres_mod);

  // evaluate rate of change of species molar concentration
  double * __restrict__ spec_rates = d_mem->spec_rates;
  eval_spec_rates (fwd_rates, rev_rates, pres_mod, spec_rates, &spec_rates[INDEX(32)]);

  register double m = pres / (8.31446210e+03 * T);
  register double logT = log(T);
  double J_nplusone = 0;
  double * __restrict__ J_nplusjplus = d_mem->J_nplusjplus;
  double * __restrict__ dBdT = d_mem->dBdT;
  if (T <= 1000.0) {
    dBdT[INDEX(0)] = (1.5000000000000000e+00 + -7.4537500000000000e+02 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(1)] = (1.5000000000000000e+00 + -7.4537500000000000e+02 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(2)] = (1.3443311200000001e+00 + -9.1793517299999996e+02 / T) / T + 3.9902603749999996e-03 + T * (-6.4927169999999995e-06 + T * (5.0393023500000001e-09 + -1.4752235220000002e-12 * T));
    dBdT[INDEX(3)] = (2.7824563599999999e+00 + -1.0639435599999999e+03 / T) / T + -1.4983670799999999e-03 + T * (3.2824340033333332e-06 + T * (-2.4203237725000002e-09 + 6.4874567400000000e-13 * T));
    dBdT[INDEX(4)] = (1.5000000000000000e+00 + 2.5473660000000000e+04 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(5)] = (2.1682671000000000e+00 + 2.9122259200000000e+04 / T) / T + -1.6396594200000000e-03 + T * (2.2143546533333334e-06 + T * (-1.5320165600000000e-09 + 4.2253194199999998e-13 * T));
    dBdT[INDEX(6)] = (2.9919842399999999e+00 + 3.3688983600000001e+03 / T) / T + -1.2005332749999999e-03 + T * (1.5388801100000001e-06 + T * (-9.6979076500000001e-10 + 2.7263900399999999e-13 * T));
    dBdT[INDEX(7)] = (3.3017980700000003e+00 + 2.6401848500000000e+02 / T) / T + -2.3745604850000002e-03 + T * (7.0527635000000006e-06 + T * (-6.0690978500000002e-09 + 1.8584504500000003e-12 * T));
    dBdT[INDEX(8)] = (3.1986352000000000e+00 + -3.0293725999999999e+04 / T) / T + -1.0182008500000000e-03 + T * (2.1734471999999999e-06 + T * (-1.3719817250000000e-09 + 3.5439360000000003e-13 * T));
    dBdT[INDEX(9)] = (3.3151514899999999e+00 + -1.7706743699999999e+04 / T) / T + -4.2369531099999998e-04 + T * (5.8801441000000001e-06 + T * (-5.6690735999999996e-09 + 1.8179003160000000e-12 * T));
    dBdT[INDEX(10)] = (2.4608442799999999e+00 + 5.0734946600000003e+04 / T) / T + 2.5093608599999998e-04 + T * (-6.6751491333333336e-07 + T * (7.9725495999999998e-10 + -2.7090367600000001e-13 * T));
    dBdT[INDEX(11)] = (1.5000000000000000e+00 + 5.6104637999999999e+04 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(12)] = (3.4607515099999997e+00 + -6.7075351400000000e+03 / T) / T + -2.8439088149999998e-03 + T * (7.0470494666666667e-06 + T * (-5.0712494999999997e-09 + 1.3790011100000000e-12 * T));
    dBdT[INDEX(13)] = (3.1919801600000000e+00 + 2.1499138700000000e+04 / T) / T + -1.0230141349999999e-03 + T * (2.2258537800000002e-06 + T * (-1.3122680875000001e-09 + 3.1117989600000001e-13 * T));
    dBdT[INDEX(14)] = (2.4929503700000000e+00 + 4.2105972199999997e+04 / T) / T + 1.5589786000000001e-04 + T * (-4.9635542666666661e-07 + T * (6.2041850499999997e-10 + -2.0714183200000001e-13 * T));
    dBdT[INDEX(15)] = (3.2547463199999997e+00 + 2.8832379300000001e+04 / T) / T + -1.7254914900000000e-03 + T * (4.5929566333333333e-06 + T * (-3.3315936000000000e-09 + 8.8204679400000002e-13 * T));
    dBdT[INDEX(16)] = (3.2185989599999996e+00 + 9.8450996400000004e+03 / T) / T + -2.3199406200000001e-03 + T * (3.6814349666666670e-06 + T * (-2.3351387675000000e-09 + 5.6110974799999994e-13 * T));
    dBdT[INDEX(17)] = (1.2571501999999999e+00 + 8.7417746000000006e+03 / T) / T + 5.6523640000000000e-03 + T * (-4.5571063333333328e-06 + T * (2.4204950750000002e-09 + -5.8614363999999997e-13 * T));
    dBdT[INDEX(18)] = (3.5352557400000002e+00 + 1.1618300300000001e+04 / T) / T + -2.8427168849999998e-03 + T * (6.1732846666666665e-06 + T * (-4.2970306249999998e-09 + 1.1116363140000001e-12 * T));
    dBdT[INDEX(19)] = (3.3079609699999999e+00 + 2.4585014100000000e+04 / T) / T + -2.5076924350000002e-03 + T * (7.5684845666666672e-06 + T * (-6.6419092749999996e-09 + 2.0599739799999999e-12 * T));
    dBdT[INDEX(20)] = (3.0769469200000001e+00 + 6.4854761600000002e+03 / T) / T + 1.0958997000000000e-04 + T * (3.3072012400000001e-06 + T * (-2.5564920250000000e-09 + 6.5244092399999995e-13 * T));
    dBdT[INDEX(21)] = (2.8098397600000000e+00 + 1.2816497900000000e+04 / T) / T + 2.1798283099999999e-04 + T * (5.0523933666666666e-06 + T * (-4.9045278250000004e-09 + 1.5505584359999998e-12 * T));
    dBdT[INDEX(22)] = (2.2101609199999999e+00 + -6.5814848099999999e+03 / T) / T + 3.0983583800000001e-03 + T * (3.6864982666666666e-06 + T * (-4.9167065500000002e-09 + 1.7650331799999999e-12 * T));
    dBdT[INDEX(23)] = (2.9440312000000000e+00 + 2.8966179999999999e+03 / T) / T + -7.9271449999999998e-04 + T * (5.5526040000000001e-06 + T * (-5.1188565000000000e-09 + 1.5670112800000000e-12 * T));
    dBdT[INDEX(24)] = (2.2141591500000000e+00 + -1.0783072700000001e+04 / T) / T + 4.0638903300000001e-03 + T * (5.5332971999999998e-07 + T * (-2.3820367700000001e-09 + 9.7426284800000002e-13 * T));
    dBdT[INDEX(26)] = (1.1735932999999998e+00 + 7.8129090500000002e+03 / T) / T + 5.2451342500000001e-03 + T * (3.6824223000000001e-06 + T * (-7.0390466749999998e-09 + 2.7316791999999999e-12 * T));
    dBdT[INDEX(27)] = (6.9329153999999993e-01 + -1.7388241099999999e+04 / T) / T + 9.5083851000000007e-03 + T * (-2.7505889900000001e-06 + T * (-1.5152845675000001e-09 + 9.3047395600000004e-13 * T));
    dBdT[INDEX(28)] = (6.1799899999999997e-01 + 2.4675259999999998e+04 / T) / T + 6.5315599999999996e-03 + T * (-5.7190400000000001e-06 + T * (4.0140200000000002e-09 + -1.2187277999999999e-12 * T));
    dBdT[INDEX(30)] = (-9.3557394000000005e-01 + 1.0451920000000000e+04 / T) / T + 1.3748649999999999e-02 + T * (-9.6648366666666658e-06 + T * (4.3631000000000004e-09 + -8.8445639999999999e-13 * T));
    dBdT[INDEX(31)] = (2.1742040000000000e+00 + 1.7272700000000001e+04 / T) / T + 2.3579535000000000e-03 + T * (4.4495566666666665e-06 + T * (-4.7992125000000004e-09 + 1.4975128000000001e-12 * T));
    dBdT[INDEX(32)] = (2.5310052800000000e+00 + -1.0469762800000001e+03 / T) / T + -6.1830494000000001e-05 + T * (-1.6766647766666668e-07 + T * (6.0882653000000001e-10 + -2.8176247000000003e-13 * T));
  } else {
    dBdT[INDEX(0)] = (1.5000000000000000e+00 + -7.4537500000000000e+02 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(1)] = (1.5000000000000000e+00 + -7.4537500000000000e+02 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(2)] = (1.9328657499999999e+00 + -8.1306558099999995e+02 / T) / T + 4.1330401299999997e-04 + T * (-4.8800788000000007e-08 + T * (3.8525103499999999e-12 + -1.3776095999999999e-16 * T));
    dBdT[INDEX(3)] = (2.6609606499999998e+00 + -1.2159771800000001e+03 / T) / T + 3.2818290550000001e-04 + T * (-4.7049875666666662e-08 + T * (5.1449483749999997e-12 + -2.5982687200000003e-16 * T));
    dBdT[INDEX(4)] = (1.5000000000000000e+00 + 2.5473660000000000e+04 / T) / T + 0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T));
    dBdT[INDEX(5)] = (1.5436369700000001e+00 + 2.9226011999999999e+04 / T) / T + -1.3658124299999999e-05 + T * (-1.3967650666666665e-09 + T * (1.2387046125000000e-12 + -9.5910738799999993e-17 * T));
    dBdT[INDEX(6)] = (1.8385303300000002e+00 + 3.6978080799999998e+03 / T) / T + 5.5370644500000001e-04 + T * (-9.8000069666666654e-08 + T * (1.0517468224999999e-11 + -4.8457978000000002e-16 * T));
    dBdT[INDEX(7)] = (3.1722874100000000e+00 + 3.1020683900000002e+01 / T) / T + 9.4058813500000002e-04 + T * (-1.1542576200000000e-07 + T * (4.8664387250000001e-12 + 3.5251380999999999e-17 * T));
    dBdT[INDEX(8)] = (1.6770388999999999e+00 + -2.9885894000000000e+04 / T) / T + 1.4865907999999999e-03 + T * (-2.5792296333333332e-07 + T * (2.3608378500000001e-11 + -8.5379982000000002e-16 * T));
    dBdT[INDEX(9)] = (3.5797730500000000e+00 + -1.8007177500000002e+04 / T) / T + 2.0266300150000001e-03 + T * (-4.3281576666666668e-07 + T * (4.9552849999999997e-11 + -2.2793758399999999e-15 * T));
    dBdT[INDEX(10)] = (1.7558292000000000e+00 + 5.0975175600000002e+04 / T) / T + 6.9924378000000003e-04 + T * (-1.3980949766666666e-07 + T * (1.5836332050000001e-11 + -7.1208443600000004e-16 * T));
    dBdT[INDEX(11)] = (1.4159429000000001e+00 + 5.6133775000000001e+04 / T) / T + 8.7445325000000003e-05 + T * (-3.9674563333333332e-08 + T * (7.5565609999999996e-12 + -4.0721966000000000e-16 * T));
    dBdT[INDEX(12)] = (1.0956667400000000e+00 + -6.3094543599999997e+03 / T) / T + 3.0737502250000001e-03 + T * (-6.6776308333333341e-07 + T * (7.5333656500000001e-11 + -3.4245440799999999e-15 * T));
    dBdT[INDEX(13)] = (1.5926304899999999e+00 + 2.1886542099999999e+04 / T) / T + 1.7384179850000001e-03 + T * (-3.6090541333333336e-07 + T * (3.7335639499999997e-11 + -1.1504823740000002e-15 * T));
    dBdT[INDEX(14)] = (1.7837264400000001e+00 + 4.2346194499999998e+04 / T) / T + 6.6492943999999995e-04 + T * (-1.4159519100000000e-07 + T * (1.9587361050000000e-11 + -1.1009026200000001e-15 * T));
    dBdT[INDEX(15)] = (2.4274442299999999e+00 + 2.8806774000000001e+04 / T) / T + 1.6164761699999999e-03 + T * (-3.9098766333333333e-07 + T * (4.7627089000000001e-11 + -2.2898301200000000e-15 * T));
    dBdT[INDEX(16)] = (2.2607123400000000e+00 + 9.9214313199999997e+03 / T) / T + 5.9550567499999998e-04 + T * (-1.4304088199999999e-07 + T * (1.7362036574999999e-11 + -8.0659136199999995e-16 * T));
    dBdT[INDEX(17)] = (3.8230728999999997e+00 + 8.0734047000000000e+03 / T) / T + 1.3135125499999999e-03 + T * (-3.1950290666666668e-07 + T * (4.0001779999999998e-11 + -1.9550460400000000e-15 * T));
    dBdT[INDEX(18)] = (2.1659812399999998e+00 + 1.1772631100000001e+04 / T) / T + 1.4997944599999999e-03 + T * (-1.3145892866666667e-07 + T * (-9.6336022249999993e-12 + 1.4152053359999999e-15 * T));
    dBdT[INDEX(19)] = (3.0074574900000002e+00 + 2.4396558600000000e+04 / T) / T + 1.2091233300000001e-03 + T * (-2.7124466700000003e-07 + T * (3.1393265999999999e-11 + -1.4561252039999998e-15 * T));
    dBdT[INDEX(20)] = (2.3371938499999998e+00 + 6.5062111199999999e+03 / T) / T + 2.8612526549999999e-03 + T * (-7.1661798999999998e-07 + T * (9.1495865250000003e-11 + -4.3723060200000002e-15 * T));
    dBdT[INDEX(21)] = (3.1166469200000000e+00 + 1.2502092100000000e+04 / T) / T + 2.4085363650000000e-03 + T * (-5.4502546333333331e-07 + T * (6.3449411499999998e-11 + -2.9548943399999998e-15 * T));
    dBdT[INDEX(22)] = (2.8811250199999998e+00 + -6.8601841899999999e+03 / T) / T + 4.0785422400000000e-03 + T * (-9.4205192000000002e-07 + T * (1.0948273325000000e-10 + -5.0544920800000002e-15 * T));
    dBdT[INDEX(23)] = (3.8847540000000000e+00 + 2.3164982000000000e+03 / T) / T + 1.0861977499999999e-03 + T * (-2.7602302999999999e-07 + T * (3.9368774999999999e-11 + -2.1021790000000000e-15 * T));
    dBdT[INDEX(24)] = (4.7918271700000004e+00 + -1.1595389499999999e+04 / T) / T + 1.8258127700000000e-03 + T * (-4.3097796666666670e-07 + T * (5.1723199000000002e-11 + -2.4630949800000002e-15 * T));
    dBdT[INDEX(26)] = (6.4834770199999996e+00 + 6.1299047399999999e+03 / T) / T + 1.2888603200000000e-03 + T * (-3.3648610333333332e-07 + T * (4.3078515749999999e-11 + -2.1430801600000001e-15 * T));
    dBdT[INDEX(27)] = (7.0309894199999992e+00 + -1.9282168500000000e+04 / T) / T + 2.2347929449999999e-03 + T * (-5.7486496999999998e-07 + T * (7.2889038250000005e-11 + -3.6020540399999995e-15 * T));
    dBdT[INDEX(28)] = (2.3711850000000001e+00 + 2.4181720000000001e+04 / T) / T + 3.0199839999999999e-03 + T * (-7.6795133333333336e-07 + T * (1.0156972499999999e-10 + -5.4262879999999996e-15 * T));
    dBdT[INDEX(30)] = (3.9773170000000002e+00 + 9.3412189999999991e+03 / T) / T + 4.7977595000000001e-03 + T * (-1.1825463333333335e-06 + T * (1.5310747500000000e-10 + -8.0595900000000005e-15 * T));
    dBdT[INDEX(31)] = (3.4418460000000000e+00 + 1.6642209999999999e+04 / T) / T + 3.6071355000000002e-03 + T * (-8.3189466666666666e-07 + T * (9.8014125000000002e-11 + -4.5979000000000000e-15 * T));
    dBdT[INDEX(32)] = (1.9525763700000001e+00 + -9.2394868799999995e+02 / T) / T + 6.9845020000000005e-04 + T * (-1.6421053433333334e-07 + T * (1.9650254875000001e-11 + -9.2151040799999995e-16 * T));
  }

  if (T <= 1500.0) {
    dBdT[INDEX(25)] = (9.3483800000000006e-01 + -5.9157159099999999e+03 / T) / T + 5.0501799999999996e-03 + T * (-1.6548720000000001e-06 + T * (2.1752800000000001e-10 + -4.6482700000000005e-16 * T));
  } else {
    dBdT[INDEX(25)] = (5.4796300000000002e+00 + -7.8095029100000002e+03 / T) / T + 9.9763700000000000e-04 + T * (-5.8012900000000006e-08 + T * (-2.4239680000000001e-11 + 3.4029599999999996e-15 * T));
  }

  if (T <= 1695.0) {
    dBdT[INDEX(29)] = (1.8854426200000001e+00 + 3.3603069000000003e+04 / T) / T + 2.3474799949999999e-03 + T * (2.3399440999999998e-07 + T * (-3.8339759499999998e-10 + 7.5869171600000007e-14 * T));
  } else {
    dBdT[INDEX(29)] = (2.1353103199999999e+00 + 3.3367834600000002e+04 / T) / T + 2.8431628449999999e-03 + T * (-6.4661155666666657e-07 + T * (7.5322625250000000e-11 + -3.4995628799999999e-15 * T));
  }

  eval_jacob_0(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, m, mw_avg, rho, dBdT, T, jac);
  eval_jacob_1(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, mw_avg, rho, dBdT, T, jac, &J_nplusone, J_nplusjplus);
  eval_jacob_2(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, m, mw_avg, rho, dBdT, T, jac, &J_nplusone, J_nplusjplus);
  eval_jacob_3(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, m, mw_avg, rho, dBdT, T, jac);
  eval_jacob_4(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, m, mw_avg, rho, dBdT, T, jac, &J_nplusone, J_nplusjplus);
  eval_jacob_5(pres, conc, fwd_rates, rev_rates, pres_mod, spec_rates, mw_avg, rho, dBdT, T, jac, &J_nplusone, J_nplusjplus);
  // species enthalpies
  double * __restrict__ h = d_mem->h;
  eval_h(T, h);

  // species specific heats
  double * __restrict__ cp = d_mem->cp;
  eval_cp(T, cp);

  // average specific heat
  register double cp_avg;
  cp_avg = (y[INDEX(1)] * cp[INDEX(0)]) + (y[INDEX(2)] * cp[INDEX(1)]) + 
     (y[INDEX(3)] * cp[INDEX(2)]) + (y[INDEX(4)] * cp[INDEX(3)]) + (y[INDEX(5)] * cp[INDEX(4)]) + 
     (y[INDEX(6)] * cp[INDEX(5)]) + (y[INDEX(7)] * cp[INDEX(6)]) + (y[INDEX(8)] * cp[INDEX(7)]) + 
     (y[INDEX(9)] * cp[INDEX(8)]) + (y[INDEX(10)] * cp[INDEX(9)]) + (y[INDEX(11)] * cp[INDEX(10)]) + 
     (y[INDEX(12)] * cp[INDEX(11)]) + (y[INDEX(13)] * cp[INDEX(12)]) + 
     (y[INDEX(14)] * cp[INDEX(13)]) + (y[INDEX(15)] * cp[INDEX(14)]) + 
     (y[INDEX(16)] * cp[INDEX(15)]) + (y[INDEX(17)] * cp[INDEX(16)]) + 
     (y[INDEX(18)] * cp[INDEX(17)]) + (y[INDEX(19)] * cp[INDEX(18)]) + 
     (y[INDEX(20)] * cp[INDEX(19)]) + (y[INDEX(21)] * cp[INDEX(20)]) + 
     (y[INDEX(22)] * cp[INDEX(21)]) + (y[INDEX(23)] * cp[INDEX(22)]) + 
     (y[INDEX(24)] * cp[INDEX(23)]) + (y[INDEX(25)] * cp[INDEX(24)]) + 
     (y[INDEX(26)] * cp[INDEX(25)]) + (y[INDEX(27)] * cp[INDEX(26)]) + 
     (y[INDEX(28)] * cp[INDEX(27)]) + (y[INDEX(29)] * cp[INDEX(28)]) + 
     (y[INDEX(30)] * cp[INDEX(29)]) + (y[INDEX(31)] * cp[INDEX(30)]) + 
     (y[INDEX(32)] * cp[INDEX(31)]) + (y_N * cp[INDEX(32)]);
  jac[INDEX(0)] = 0.0;
  double working_temp = 0;
  //Finish dYk / Yj's
  //And dT/dYj's
  eval_jacob_6(mw_avg, rho, cp_avg, spec_rates, h, cp, jac, J_nplusjplus);
  if (T <= 1000.0) {
    working_temp = (y[INDEX(1)] * 2.0772653025533405e+03 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(2)] * 2.0813212426154001e+02 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(3)] * 4.1244826576978785e+03 * (7.9805207499999992e-03 + T * (-3.8956301999999997e-05 + T * (6.0471628200000004e-08 + -2.9504470440000002e-11 * T))))
    + (y[INDEX(4)] * 2.5983668450066881e+02 * (-2.9967341599999998e-03 + T * (1.9694604020000000e-05 + T * (-2.9043885270000002e-08 + 1.2974913480000000e-11 * T))))
    + (y[INDEX(5)] * 8.2489653153957570e+03 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(6)] * 5.1967336900133762e+02 * (-3.2793188399999999e-03 + T * (1.3286127919999999e-05 + T * (-1.8384198720000000e-08 + 8.4506388399999997e-12 * T))))
    + (y[INDEX(7)] * 4.8887492694330808e+02 * (-2.4010665499999998e-03 + T * (9.2332806600000008e-06 + T * (-1.1637489180000001e-08 + 5.4527800800000000e-12 * T))))
    + (y[INDEX(8)] * 2.5190194790518544e+02 * (-4.7491209700000004e-03 + T * (4.2316581000000002e-05 + T * (-7.2829174200000009e-08 + 3.7169009000000002e-11 * T))))
    + (y[INDEX(9)] * 4.6152277955158070e+02 * (-2.0364017000000000e-03 + T * (1.3040683200000000e-05 + T * (-1.6463780699999999e-08 + 7.0878720000000001e-12 * T))))
    + (y[INDEX(10)] * 2.4443746347165404e+02 * (-8.4739062199999996e-04 + T * (3.5280864600000001e-05 + T * (-6.8028883199999996e-08 + 3.6358006320000000e-11 * T))))
    + (y[INDEX(11)] * 4.8887492694330808e+02 * (5.0187217199999996e-04 + T * (-4.0050894799999999e-06 + T * (9.5670595199999994e-09 + -5.4180735200000003e-12 * T))))
    + (y[INDEX(12)] * 5.9360437189524475e+02 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(13)] * 4.8820837952480719e+02 * (-5.6878176299999996e-03 + T * (4.2282296800000002e-05 + T * (-6.0854994000000003e-08 + 2.7580022200000000e-11 * T))))
    + (y[INDEX(14)] * 5.1892025773562625e+02 * (-2.0460282699999999e-03 + T * (1.3355122680000000e-05 + T * (-1.5747217049999999e-08 + 6.2235979200000000e-12 * T))))
    + (y[INDEX(15)] * 5.5375553125341332e+02 * (3.1179572000000002e-04 + T * (-2.9781325599999999e-06 + T * (7.4450220599999993e-09 + -4.1428366400000001e-12 * T))))
    + (y[INDEX(16)] * 2.8649397927461854e+02 * (-3.4509829800000000e-03 + T * (2.7557739800000002e-05 + T * (-3.9979123200000003e-08 + 1.7640935880000001e-11 * T))))
    + (y[INDEX(17)] * 2.7709202516551613e+02 * (-4.6398812400000001e-03 + T * (2.2088609800000001e-05 + T * (-2.8021665210000002e-08 + 1.1222194960000000e-11 * T))))
    + (y[INDEX(18)] * 1.8890974869174661e+02 * (1.1304728000000000e-02 + T * (-2.7342637999999999e-05 + T * (2.9045940900000003e-08 + -1.1722872800000000e-11 * T))))
    + (y[INDEX(19)] * 2.6808669159297972e+02 * (-5.6854337699999997e-03 + T * (3.7039707999999999e-05 + T * (-5.1564367499999994e-08 + 2.2232726280000001e-11 * T))))
    + (y[INDEX(20)] * 2.6808669159297972e+02 * (-5.0153848700000003e-03 + T * (4.5410907400000001e-05 + T * (-7.9702911299999989e-08 + 4.1199479600000001e-11 * T))))
    + (y[INDEX(21)] * 2.5964827015909680e+02 * (2.1917993999999999e-04 + T * (1.9843207440000002e-05 + T * (-3.0677904299999999e-08 + 1.3048818480000000e-11 * T))))
    + (y[INDEX(22)] * 2.5964827015909680e+02 * (4.3596566199999997e-04 + T * (3.0314360199999999e-05 + T * (-5.8854333900000004e-08 + 3.1011168719999997e-11 * T))))
    + (y[INDEX(23)] * 2.5172486130773396e+02 * (6.1967167600000001e-03 + T * (2.2118989599999999e-05 + T * (-5.9000478600000003e-08 + 3.5300663599999999e-11 * T))))
    + (y[INDEX(24)] * 1.8072741022059520e+02 * (-1.5854290000000000e-03 + T * (3.3315624000000002e-05 + T * (-6.1426278000000000e-08 + 3.1340225600000000e-11 * T))))
    + (y[INDEX(25)] * 1.7685272606920398e+02 * (8.1277806600000002e-03 + T * (3.3199783200000001e-06 + T * (-2.8584441240000001e-08 + 1.9485256959999999e-11 * T))))
    + (y[INDEX(27)] * 1.3409354319188117e+02 * (1.0490268500000000e-02 + T * (2.2094533800000000e-05 + T * (-8.4468560100000001e-08 + 5.4633583999999997e-11 * T))))
    + (y[INDEX(28)] * 1.3194861272806452e+02 * (1.9016770200000001e-02 + T * (-1.6503533939999999e-05 + T * (-1.8183414810000003e-08 + 1.8609479120000000e-11 * T))))
    + (y[INDEX(29)] * 2.7687776562670666e+02 * (1.3063119999999999e-02 + T * (-3.4314240000000000e-05 + T * (4.8168240000000002e-08 + -2.4374555999999999e-11 * T))))
    + (y[INDEX(31)] * 2.5946012886781313e+02 * (2.7497299999999999e-02 + T * (-5.7989019999999998e-05 + T * (5.2357200000000008e-08 + -1.7689128000000000e-11 * T))))
    + (y[INDEX(32)] * 2.6788612733710727e+02 * (4.7159070000000001e-03 + T * (2.6697339999999999e-05 + T * (-5.7590550000000005e-08 + 2.9950256000000003e-11 * T))))
    + (y_N * 2.9680218594762238e+02 * (-1.2366098800000000e-04 + T * (-1.0059988660000001e-06 + T * (7.3059183600000005e-09 + -5.6352494000000003e-12 * T))));
  } else {
    working_temp = (y[INDEX(1)] * 2.0772653025533405e+03 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(2)] * 2.0813212426154001e+02 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(3)] * 4.1244826576978785e+03 * (8.2660802599999995e-04 + T * (-2.9280472800000003e-07 + T * (4.6230124199999999e-11 + -2.7552192000000000e-15 * T))))
    + (y[INDEX(4)] * 2.5983668450066881e+02 * (6.5636581100000002e-04 + T * (-2.8229925399999997e-07 + T * (6.1739380499999999e-11 + -5.1965374400000003e-15 * T))))
    + (y[INDEX(5)] * 8.2489653153957570e+03 * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + T * (0.0000000000000000e+00 + 0.0000000000000000e+00 * T))))
    + (y[INDEX(6)] * 5.1967336900133762e+02 * (-2.7316248599999999e-05 + T * (-8.3805903999999992e-09 + T * (1.4864455349999999e-11 + -1.9182147759999999e-15 * T))))
    + (y[INDEX(7)] * 4.8887492694330808e+02 * (1.1074128900000000e-03 + T * (-5.8800041799999995e-07 + T * (1.2620961869999999e-10 + -9.6915956000000007e-15 * T))))
    + (y[INDEX(8)] * 2.5190194790518544e+02 * (1.8811762700000000e-03 + T * (-6.9255457200000001e-07 + T * (5.8397264700000001e-11 + 7.0502761999999997e-16 * T))))
    + (y[INDEX(9)] * 4.6152277955158070e+02 * (2.9731815999999999e-03 + T * (-1.5475377800000000e-06 + T * (2.8330054200000001e-10 + -1.7075996400000000e-14 * T))))
    + (y[INDEX(10)] * 2.4443746347165404e+02 * (4.0532600300000002e-03 + T * (-2.5968946000000000e-06 + T * (5.9463419999999994e-10 + -4.5587516799999997e-14 * T))))
    + (y[INDEX(11)] * 4.8887492694330808e+02 * (1.3984875600000001e-03 + T * (-8.3885698599999995e-07 + T * (1.9003598460000001e-10 + -1.4241688720000000e-14 * T))))
    + (y[INDEX(12)] * 5.9360437189524475e+02 * (1.7489065000000001e-04 + T * (-2.3804737999999999e-07 + T * (9.0678731999999996e-11 + -8.1443932000000000e-15 * T))))
    + (y[INDEX(13)] * 4.8820837952480719e+02 * (6.1475004500000001e-03 + T * (-4.0065785000000003e-06 + T * (9.0400387800000001e-10 + -6.8490881599999999e-14 * T))))
    + (y[INDEX(14)] * 5.1892025773562625e+02 * (3.4768359700000002e-03 + T * (-2.1654324800000001e-06 + T * (4.4802767399999999e-10 + -2.3009647480000002e-14 * T))))
    + (y[INDEX(15)] * 5.5375553125341332e+02 * (1.3298588799999999e-03 + T * (-8.4957114600000003e-07 + T * (2.3504833260000003e-10 + -2.2018052400000001e-14 * T))))
    + (y[INDEX(16)] * 2.8649397927461854e+02 * (3.2329523399999998e-03 + T * (-2.3459259800000001e-06 + T * (5.7152506800000006e-10 + -4.5796602399999998e-14 * T))))
    + (y[INDEX(17)] * 2.7709202516551613e+02 * (1.1910113500000000e-03 + T * (-8.5824529199999997e-07 + T * (2.0834443889999998e-10 + -1.6131827239999999e-14 * T))))
    + (y[INDEX(18)] * 1.8890974869174661e+02 * (2.6270250999999999e-03 + T * (-1.9170174400000002e-06 + T * (4.8002136000000002e-10 + -3.9100920799999997e-14 * T))))
    + (y[INDEX(19)] * 2.6808669159297972e+02 * (2.9995889199999999e-03 + T * (-7.8875357200000001e-07 + T * (-1.1560322670000000e-10 + 2.8304106719999999e-14 * T))))
    + (y[INDEX(20)] * 2.6808669159297972e+02 * (2.4182466600000002e-03 + T * (-1.6274680020000001e-06 + T * (3.7671919200000002e-10 + -2.9122504079999997e-14 * T))))
    + (y[INDEX(21)] * 2.5964827015909680e+02 * (5.7225053099999998e-03 + T * (-4.2997079400000001e-06 + T * (1.0979503830000000e-09 + -8.7446120400000000e-14 * T))))
    + (y[INDEX(22)] * 2.5964827015909680e+02 * (4.8170727300000001e-03 + T * (-3.2701527799999999e-06 + T * (7.6139293799999997e-10 + -5.9097886799999997e-14 * T))))
    + (y[INDEX(23)] * 2.5172486130773396e+02 * (8.1570844800000000e-03 + T * (-5.6523115200000004e-06 + T * (1.3137927990000000e-09 + -1.0108984160000000e-13 * T))))
    + (y[INDEX(24)] * 1.8072741022059520e+02 * (2.1723954999999999e-03 + T * (-1.6561381799999999e-06 + T * (4.7242529999999994e-10 + -4.2043580000000002e-14 * T))))
    + (y[INDEX(25)] * 1.7685272606920398e+02 * (3.6516255399999999e-03 + T * (-2.5858678000000002e-06 + T * (6.2067838800000005e-10 + -4.9261899600000002e-14 * T))))
    + (y[INDEX(27)] * 1.3409354319188117e+02 * (2.5777206400000000e-03 + T * (-2.0189166200000000e-06 + T * (5.1694218899999997e-10 + -4.2861603200000002e-14 * T))))
    + (y[INDEX(28)] * 1.3194861272806452e+02 * (4.4695858899999998e-03 + T * (-3.4491898199999999e-06 + T * (8.7466845900000006e-10 + -7.2041080799999996e-14 * T))))
    + (y[INDEX(29)] * 2.7687776562670666e+02 * (6.0399679999999997e-03 + T * (-4.6077080000000002e-06 + T * (1.2188366999999999e-09 + -1.0852576000000000e-13 * T))))
    + (y[INDEX(31)] * 2.5946012886781313e+02 * (9.5955190000000003e-03 + T * (-7.0952780000000003e-06 + T * (1.8372896999999999e-09 + -1.6119180000000000e-13 * T))))
    + (y[INDEX(32)] * 2.6788612733710727e+02 * (7.2142710000000004e-03 + T * (-4.9913680000000002e-06 + T * (1.1761694999999999e-09 + -9.1958000000000001e-14 * T))))
    + (y_N * 2.9680218594762238e+02 * (1.3969004000000001e-03 + T * (-9.8526320600000006e-07 + T * (2.3580305850000002e-10 + -1.8430208160000000e-14 * T))));
  }

  if (T <= 1500.0) {
    working_temp += (y[INDEX(26)] * 1.7685272606920398e+02 * (1.0100359999999999e-02 + T * (-9.9292320000000006e-06 + T * (2.6103360000000003e-09 + -9.2965400000000002e-15 * T))));
  } else {
    working_temp += (y[INDEX(26)] * 1.7685272606920398e+02 * (1.9952740000000000e-03 + T * (-3.4807740000000002e-07 + T * (-2.9087615999999999e-10 + 6.8059199999999995e-14 * T))));
  }

  if (T <= 1695.0) {
    working_temp += (y[INDEX(30)] * 2.7687776562670666e+02 * (4.6949599899999998e-03 + T * (1.4039664599999999e-06 + T * (-4.6007711400000001e-09 + 1.5173834320000001e-12 * T))));
  } else {
    working_temp += (y[INDEX(30)] * 2.7687776562670666e+02 * (5.6863256899999997e-03 + T * (-3.8796693399999996e-06 + T * (9.0387150300000000e-10 + -6.9991257600000001e-14 * T))));
  }


  //Complete dT wrt T calculations
  jac[INDEX(0)] = -(spec_rates[INDEX(0)] * 4.00260000e+00 * (-working_temp * h[INDEX(0)] / cp_avg + cp[INDEX(0)]) + jac[INDEX(1)] * h[INDEX(0)] * rho
    + spec_rates[INDEX(1)] * 3.99480000e+01 * (-working_temp * h[INDEX(1)] / cp_avg + cp[INDEX(1)]) + jac[INDEX(2)] * h[INDEX(1)] * rho
    + spec_rates[INDEX(2)] * 2.01588000e+00 * (-working_temp * h[INDEX(2)] / cp_avg + cp[INDEX(2)]) + jac[INDEX(3)] * h[INDEX(2)] * rho
    + spec_rates[INDEX(3)] * 3.19988000e+01 * (-working_temp * h[INDEX(3)] / cp_avg + cp[INDEX(3)]) + jac[INDEX(4)] * h[INDEX(3)] * rho
    + spec_rates[INDEX(4)] * 1.00794000e+00 * (-working_temp * h[INDEX(4)] / cp_avg + cp[INDEX(4)]) + jac[INDEX(5)] * h[INDEX(4)] * rho
    + spec_rates[INDEX(5)] * 1.59994000e+01 * (-working_temp * h[INDEX(5)] / cp_avg + cp[INDEX(5)]) + jac[INDEX(6)] * h[INDEX(5)] * rho
    + spec_rates[INDEX(6)] * 1.70073400e+01 * (-working_temp * h[INDEX(6)] / cp_avg + cp[INDEX(6)]) + jac[INDEX(7)] * h[INDEX(6)] * rho
    + spec_rates[INDEX(7)] * 3.30067400e+01 * (-working_temp * h[INDEX(7)] / cp_avg + cp[INDEX(7)]) + jac[INDEX(8)] * h[INDEX(7)] * rho
    + spec_rates[INDEX(8)] * 1.80152800e+01 * (-working_temp * h[INDEX(8)] / cp_avg + cp[INDEX(8)]) + jac[INDEX(9)] * h[INDEX(8)] * rho
    + spec_rates[INDEX(9)] * 3.40146800e+01 * (-working_temp * h[INDEX(9)] / cp_avg + cp[INDEX(9)]) + jac[INDEX(10)] * h[INDEX(9)] * rho
    + spec_rates[INDEX(10)] * 1.70073400e+01 * (-working_temp * h[INDEX(10)] / cp_avg + cp[INDEX(10)]) + jac[INDEX(11)] * h[INDEX(10)] * rho
    + spec_rates[INDEX(11)] * 1.40067400e+01 * (-working_temp * h[INDEX(11)] / cp_avg + cp[INDEX(11)]) + jac[INDEX(12)] * h[INDEX(11)] * rho
    + spec_rates[INDEX(12)] * 1.70305600e+01 * (-working_temp * h[INDEX(12)] / cp_avg + cp[INDEX(12)]) + jac[INDEX(13)] * h[INDEX(12)] * rho
    + spec_rates[INDEX(13)] * 1.60226200e+01 * (-working_temp * h[INDEX(13)] / cp_avg + cp[INDEX(13)]) + jac[INDEX(14)] * h[INDEX(13)] * rho
    + spec_rates[INDEX(14)] * 1.50146800e+01 * (-working_temp * h[INDEX(14)] / cp_avg + cp[INDEX(14)]) + jac[INDEX(15)] * h[INDEX(14)] * rho
    + spec_rates[INDEX(15)] * 2.90214200e+01 * (-working_temp * h[INDEX(15)] / cp_avg + cp[INDEX(15)]) + jac[INDEX(16)] * h[INDEX(15)] * rho
    + spec_rates[INDEX(16)] * 3.00061400e+01 * (-working_temp * h[INDEX(16)] / cp_avg + cp[INDEX(16)]) + jac[INDEX(17)] * h[INDEX(16)] * rho
    + spec_rates[INDEX(17)] * 4.40128800e+01 * (-working_temp * h[INDEX(17)] / cp_avg + cp[INDEX(17)]) + jac[INDEX(18)] * h[INDEX(17)] * rho
    + spec_rates[INDEX(18)] * 3.10140800e+01 * (-working_temp * h[INDEX(18)] / cp_avg + cp[INDEX(18)]) + jac[INDEX(19)] * h[INDEX(18)] * rho
    + spec_rates[INDEX(19)] * 3.10140800e+01 * (-working_temp * h[INDEX(19)] / cp_avg + cp[INDEX(19)]) + jac[INDEX(20)] * h[INDEX(19)] * rho
    + spec_rates[INDEX(20)] * 3.20220200e+01 * (-working_temp * h[INDEX(20)] / cp_avg + cp[INDEX(20)]) + jac[INDEX(21)] * h[INDEX(20)] * rho
    + spec_rates[INDEX(21)] * 3.20220200e+01 * (-working_temp * h[INDEX(21)] / cp_avg + cp[INDEX(21)]) + jac[INDEX(22)] * h[INDEX(21)] * rho
    + spec_rates[INDEX(22)] * 3.30299600e+01 * (-working_temp * h[INDEX(22)] / cp_avg + cp[INDEX(22)]) + jac[INDEX(23)] * h[INDEX(22)] * rho
    + spec_rates[INDEX(23)] * 4.60055400e+01 * (-working_temp * h[INDEX(23)] / cp_avg + cp[INDEX(23)]) + jac[INDEX(24)] * h[INDEX(23)] * rho
    + spec_rates[INDEX(24)] * 4.70134800e+01 * (-working_temp * h[INDEX(24)] / cp_avg + cp[INDEX(24)]) + jac[INDEX(25)] * h[INDEX(24)] * rho
    + spec_rates[INDEX(25)] * 4.70134800e+01 * (-working_temp * h[INDEX(25)] / cp_avg + cp[INDEX(25)]) + jac[INDEX(26)] * h[INDEX(25)] * rho
    + spec_rates[INDEX(26)] * 6.20049400e+01 * (-working_temp * h[INDEX(26)] / cp_avg + cp[INDEX(26)]) + jac[INDEX(27)] * h[INDEX(26)] * rho
    + spec_rates[INDEX(27)] * 6.30128800e+01 * (-working_temp * h[INDEX(27)] / cp_avg + cp[INDEX(27)]) + jac[INDEX(28)] * h[INDEX(27)] * rho
    + spec_rates[INDEX(28)] * 3.00293600e+01 * (-working_temp * h[INDEX(28)] / cp_avg + cp[INDEX(28)]) + jac[INDEX(29)] * h[INDEX(28)] * rho
    + spec_rates[INDEX(29)] * 3.00293600e+01 * (-working_temp * h[INDEX(29)] / cp_avg + cp[INDEX(29)]) + jac[INDEX(30)] * h[INDEX(29)] * rho
    + spec_rates[INDEX(30)] * 3.20452400e+01 * (-working_temp * h[INDEX(30)] / cp_avg + cp[INDEX(30)]) + jac[INDEX(31)] * h[INDEX(30)] * rho
    + spec_rates[INDEX(31)] * 3.10373000e+01 * (-working_temp * h[INDEX(31)] / cp_avg + cp[INDEX(31)]) + jac[INDEX(32)] * h[INDEX(31)] * rho
    + spec_rates[INDEX(32)] * 2.80134800e+01 * (-working_temp * h[INDEX(32)] / cp_avg + cp[INDEX(32)]) + J_nplusone * h[INDEX(32)] * rho) / (rho * cp_avg);

  
  // if (threadIdx.x==0 && blockIdx.x==0) {
  //   printf("jac is \n");
  //   for (int i = 0; i<NSP; i++) {
  //     for (int j = 0; j<NSP; j++) {
  //       printf("%e ", jac[INDEX(i*NSP+j)]);
  //     }
  //     printf("\n");
  //   }
  // }

} // end eval_jacob

